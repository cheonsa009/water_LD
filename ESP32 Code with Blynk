#define BLYNK_TEMPLATE_ID "TMPL6IzLqMgqO"
#define BLYNK_TEMPLATE_NAME "Water Leakage Detector"
#define BLYNK_AUTH_TOKEN "cquzDcdpOH9UrcWeMf5jwTq2oe7NQxmX"

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>

#define WATER_SENSOR_PIN 32
#define LED_PIN 27         
#define BUZZER_PIN 26      

char auth[] = "cquzDcdpOH9UrcWeMf5jwTq2oe7NQxmX";
char ssid[] = "anghel";
char pass[] = "kimpoyyy";

#define SMOOTHING_FACTOR 3

int readings[SMOOTHING_FACTOR];
int readIndex = 0;
int total = 0;
int averageReading = 0;

bool leakDetected = false;
const int thresholdOn = 500;     
const int thresholdOff = 1500;   

BlynkTimer timer;

float computeTrendSlope() {
  float sumX = 0, sumY = 0, sumXY = 0, sumXX = 0;
  for (int i = 0; i < SMOOTHING_FACTOR; i++) {
    sumX += i;
    sumY += readings[i];
    sumXY += i * readings[i];
    sumXX += i * i;
  }
  float numerator = SMOOTHING_FACTOR * sumXY - sumX * sumY;
  float denominator = SMOOTHING_FACTOR * sumXX - sumX * sumX;
  if (denominator == 0) return 0;
  return numerator / denominator;
}

void checkWaterSensor() {
  total = total - readings[readIndex];
  readings[readIndex] = analogRead(WATER_SENSOR_PIN);
  total = total + readings[readIndex];
  readIndex = (readIndex + 1) % SMOOTHING_FACTOR;
  averageReading = total / SMOOTHING_FACTOR;

  float slope = computeTrendSlope();

  Serial.print("Smoothed Water Sensor Value: ");
  Serial.println(averageReading);
  Serial.print("Trend Slope: ");
  Serial.println(slope);

  Blynk.virtualWrite(V1, averageReading);
  Blynk.virtualWrite(V4, slope);

  if (averageReading < thresholdOn && !leakDetected) {
    leakDetected = true;
    digitalWrite(LED_PIN, HIGH);
    digitalWrite(BUZZER_PIN, HIGH);
    Serial.println(">> Water leak detected! LED and buzzer ON.");
    Blynk.logEvent("water_leak", "ðŸš¨ Water Leak Detected! Sensor value: " + String(averageReading));
  }
  else if (averageReading > thresholdOff && leakDetected) {
    leakDetected = false;
    digitalWrite(LED_PIN, LOW);
    digitalWrite(BUZZER_PIN, LOW);
    Serial.println(">> Sensor dry. LED and buzzer OFF.");
  }
}

void setup() {
  Serial.begin(115200);

  pinMode(WATER_SENSOR_PIN, INPUT);
  pinMode(LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  digitalWrite(LED_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);

  for (int i = 0; i < SMOOTHING_FACTOR; i++) {
    readings[i] = 0;
  }

  Blynk.begin(auth, ssid, pass);

  timer.setInterval(500L, checkWaterSensor);
}

void loop() {
  Blynk.run();
  timer.run();
}
